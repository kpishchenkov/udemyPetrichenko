----- Плагины -----
- "Import Cost" - позволяет включать в определенные срипты 
  другие файлы и позволяет увидеть сколько будет занимать эти файлы;
- "JavaScript (ES6) code snippets" - позволяет очень быстро раскрывать
  некоторые конструкции;
- "jshint" - указывает на ошибки. Для его настройки в папке с проектом
  нужно создать файл .jshintrc со следующими настройками:
  {
      "camelcase": true,
      "indent": 2,
      "undef": true,
      "quotmark": false,
      "maxlen": 120,
      "trailing": true,
      "curly": true,
      "strict": false,
      "browser": true,
      "devel": true,
      "jquery": true,
      "esversion": 8,
      "node": true
  }
  файл .jshintrc можно поместить в папку со всеми проектами, тогд аон применится 
  ко всем проектам сразу. 
  Если нужно уточнить настройки в каком-то конкретном проекте, то нужно внутри 
  папки этого проекта создать еще один такой файл со своими настройками, тогда
  он будет действовать только на это проект.





-----------------------------------------

node.js (+ менеджер пакетов NPM) - окружение, 

npm (аббр. node package manager) — это стандартный менеджер пакетов, 
автоматически устанавливающийся вместе с Node. js. Он используется для скачивания
пакетов из облачного сервера npm, либо для загрузки пакетов на эти сервера.

----- Подключение JS к веб-странице -----

В нижней части (в конце) HTML раздела 
<body>

подключаем скрипт:
<script src="index.js"></script>
</body>

----- Переменные и строгий режим -----

----- Переменные -----

let - пременная, значение которой МОЖНО менять в будущем 
const  - пременная, значение которой НЕЛЬЗЯ менять в будущем

Название переменной:
- начинается только с латинской буквы или символов "$" или "_"; 
- пишется в формате camelCase (все слова слитно, первое слово начинается со строчной буквы,
  каждое следующее - с заглавной);
- должно быть осмысленным и означать фактически значение переменной;
- названия должны точно описывать то, что лежит в переменной.
- могут писаться в формате snake_case и UPPER_SNAKE_CASE - так переменные, 
  чаще всего, называются тогда, когда их нельзя меняь (константы),
  ДАЖЕ, ЕСЛИ ЗНАЧЕНИЕ ЗАПИСАНО В ПЕРЕМЕННУЮ let;
- так же, нельзя менять переменные, которые начинаются с нижнего подчеркивания "_";

Примеры
let number = 5;
const leftBorderWidth = 5;

Переменные можно объявлять подряд с одним const
const a = 1;
      b = 2;
      c = 1;
      и так далее...

Примеры названий переменных и других объектов:
- camelCase;
- snake_case;
- UPPER_SNAKE_CASE;
- Kebab-case - так называют папки, но не переменные;
- PascalCase - для названия стилей в JavaScript.


Переменная видна только в блоке кода, где она находится
Пример:
{
  let name = "Kostya";
}
console.log(name); - программа не видит эту переменную, так как она объявлена 
                     внутри блока {}, ее просто не существует вне блока.

Проверить, в каких браузерах поддерживаются элементы стандарта можно на сайте
http://www.caniuse.com

----- Строгий режим -----

Работаем в современном режиме, где не работают неточности, 
которые были в старых версиях JavaScript

Для подключения в начале файла JavaScript указываем "use strict";

Между именем функции и скобкой нет пробела
Между параметрами функции (в скобках) запятая и пробел
Тело функции открывается на той же строке фигурной скобкой {
  Тело функции начинается с новой строки с отступом в 2 пробела
  После for в теле функции пробел перед скобками
  Пробелы вокруд операторов (= / < >)
  Точка с запятой в конце каждой строки.
Длинна строки не больше 80 символов
} else { без переноса на новую строку
Внутри alert пробелы вокруг вложенного вызова alert( pow(x, n) );

Когда ставить точки запятой:
- обязательно после объявления/изменения переменной
- в конце каких-то логических операций

----- Типы данных JavaScript -----

ПРОСТЫЕ ТИПЫ
- number числовой тип: 1, 2, 3..., включает в себя:
  * Infinity - результат деления на 0 (ноль);
  * NaN (Not a number) - тип значения при умножении (/ - +) string и number
- string текстовый тип: строки "string", "name";
- boolean - логический значение true или false;
- null - ничего не существует
  например, когда пытаешься вызвать переменную без ее объявления:
  console.log(name);
  в консоль будет выведено ReferenceError (ошибка ссылочного типа, что мы не можем 
  сослаться на несуществующий объект);
- undefined что-то есть, но у этого нет никакого значения
  let num;
  console.log(num);
  Результат в консоли undefined, так как в переменной num ничего не содержится,
  хоть она и была объявлена;
- Symbol;
- BigInt отображает большие числа (числа, больше, чем 2^53);
  для применения в конце целочисленного значения указывется n
  например
  console.log(1234567890123456789n * 123n);
  в консоль выведется 151851850485185185047n


                      ОБЪЕКТЫ
                    /         \
Специальные ОБЪЕКТЫ          Обычные ОБЪЕКТЫ
- Массивы []; 
- Функции function;
- Объект даты;
- Регулярные выражения;
- Ошибки;

Пример объекта
const obj = {
  name: "Kostya",
  age: 33,
  isMarried: false
};

Добавление данных в объект:
          ---Пример-1
const obj = {
  name: "Kostya",
  age: 33,
  isMarried: false
};

obj.height = 185;

console.log(obj); 
в консоли выведется {name: "Kostya", age: 33, isMarried: false, height: 184}

          ---Пример-2
          
СПЕЦИАЛЬНЫЕ ОБЪЕКТЫ:
- Массивы [] (частный случай объекта); 
  * указываются после присвоения имени массива через = в квардатных скобках
  * элементы в массиве идут строго по порядку, как указаны в квадратных скобках
  * может включать любые другие типы данных
          пример
                        0           1         2   3   4
          let arr = ["plum.jpg", "apple.gif", 6, [], {}];
          console.log(arr[0]); - в консоль выведется plum.jpg;
  * в массиве роль ключа знчения объекта играет его порядковый номер начиная с 0
- Функции function;

- Объект даты;

- Регулярные выражения;

- Ошибки;